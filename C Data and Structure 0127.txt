LinkedList : 포인터로 연결
	자료의 앞 뒤를 어떻게 연결할 것 인가

스택(stack) 

후입선출 : 나중에 들어온게 먼저 나간다. (LIFO 라고도 함 / LAST IN FIRST OUT)

Data in (데이터가 들어 올 때) : push

Data out (데이터를 제거 할 때) : peek, pop

peek : 데이터를 제거하지 않고 가져온다(복사해서 가져 온다고 생각하면 됨)
pop : 데이터를 가져오면서 제거




자료구조 //


typedef struct ArrayStackNodeType {
	char data;
}ArrayStackNode;


typedef struct ArrayStackType {
	int maxCount; // stack의 최대 자료 개수
	int currentCount; // 현재 저장되어 있는 stack의 개수
	ArrayStackNode *pData; 자료를 저장하는 포인터 변수
}ArrayStack;



스택의 top은 무엇이냐 -> 마지막 위치에 있는 값



// 연결리스트와 다르게 길이값이 있기 때문에 만들 수 있는 개수 제한이 있음. 
// 그래서 스택에서는 stack의 길이값에 대한 매개변수가 필요함. size을 알아야 하기 때문 if size==10 스택의 길이값은 10이다
// 스택또한 동적 메모리 할당을 해주어야 한다 -> 왜? because : struct ArrayStackNodeType 이 구조체는 사용자 정의 자료형
이기 때문에 ex) int a[3] -> 12byte , ArrayStackNodeType 는 사용자 정의 자료형 이기 때문에 모름(내가 직접 작성한거라 계산하는 것 말고는 알 수 없음 / 나만 아는 것이고 컴파일러는 모름. 왜냐 ArrayStackNodeType  이러한 자료형은 존재하지 않기 때문에(내가 만들었기 때문에 )).

스택 큐 리스트 모두 다 똑같음
1. 메모리할당
2. 메모리 초기화 // 리스트는 1,2번이 끝 / 스택은 길이값이 있기 때문에
3. 최대 자료 개수 // 이게 들어 가줘야 된다. 3번이 없으면 리스트 형식으로 들어가는 것

우선 메모리 할당 하기전에 변수를 선언(초기화) 해줘야함
ArrayStack *createArrayStack(int size) { 
	ArrayStack *pReturn = NULL; // 처음으로 스택을 생성하니깐(즉, 메모리할당 크기가 없는, 자료가 없기때문에 NULL로 초기화를 해줌)
	pReturn = (ArrayStack*)malloc(sizeof(ArrayStack)); // 스택의 메모리 할당
	memset(pReturn, 0, sizeof(ArrayStack)) // 메모리 초기화 하는 것임, 인자값 총 3개 / 1. 메모리 할당한 변수 , 2, 0으로 초기화 3. sizeof(자료형) 
	pReturn->maxCount = size; // 여기까지 스택 생성하고 스택 초기화

	// 배열 생성 및 초기화
	pReturn->pData = (ArrayStackNode*)malloc(sizeof(ArrayStackNode)); // 배열의 메모리 할당 / 그런데 배열의 개수만큼 메모리할당을 해주어야됨 즉,
	ㄴ 여기의 추가로 
	pReturn->pData = (ArrayStackNode*)malloc(sizeof(ArrayStackNode)) * size; // 라고 해주어야 됨
	memset(pReturn->pData,0,sizeof(ArrayStackNode) * size);

	return pReturn;
} // 스택 그 자체와, 배열(노드) 를 각각 메모리 할당을 해주어야 한다.

================================================
ㄴpush 연산


1. int isArrayStackFull(int currentCount, int maxCount) 가 아니다. 왜냐 currentCount와 maxCount는 생성만 해주는 것임
ㄴ int isArrayStackFull(ArrayStack *pStack) { //  이렇게 잡아야 됨 // 예를 pushAs보다 먼저 생성해주어야 한다! 이거 중요
	int rect = 0;
	if (pStack != NULL) { // pStack이 NULL이 아니란 것이 의미하는 바는 pStack의  int maxCount, currentCount, pData 의 데이터가 존재한다는 것을 의미
		if ( pStack->currentCount == pStack->maxCount) {
			rect = 1;	
	
		}
	
	}

	return rect;
}




2.
int pushAs(ArrayStack *pStack, char data) // pushAs에는 매개변수가 들어가야됨 -> ArrayStackNode의 char data가 들어간다
{
	push를 할 때 현재 노드의 개수 즉, currentCount와 maxCount를 비교해줘야한다. -> 왜? maxCount를 초과해서 push하면 오버플로우가 발생하기 떄문에
	그래서 먼저 데이터가 들어가기 전에 currentCount와>= maxCount 인지 확인 해줘야 하는 듯 push하기전에 먼저 비교!
	push를 이용하기 전에 먼저 createArrayStack에 노드를 비교하여 data를 집어 넣을 수 있다면(full이 아니라면) pushAs()를 실행하면 된다.
	// maxCount를 넘기면 안되니 비교를 먼저 해주어야 한다.
	// 만약 Full이면 pushAs를 호출하지말고(데이터를 넣을 수 없음)
	// 만약 Full이 아니면 pushAs를 호출하면 된다(데이터를 넣어주면 된다)
	
	int rect 0;
	if(isArrayStackFull(pStack) == 0 ) {
		pStack->pData[pStack->currentCount].data = data
		pStack->currentCount++;
		rect = 1;
		
	}
	else
	{
		printf("스택이 가득 차 있습니다. ", pushAd() \n");
	}
	return rect;
}






