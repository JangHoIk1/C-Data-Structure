/*#include<stido.h>
int main(void)
{
	int a = 100;
	int b = 200;

	printf("a의 주소 %d\n", &a); // %d, %i
	printf("b의 주소 %d\n", &b);

	return 0;
}

// * : 포인터 연산자, & : 주소 연산자
*/


//#include<stdio.h>
//int main(void)
//{
//	int aa[3] = { 1,2,3 };
//
//	printf("aa[0]의 값은 %d, 주소는 %d\n", aa[0], &aa[0]); // aa와 &aa[0]은 같은 주소값을 가진다 -> 이 의미는 aa는 배열의 전체를 나타내며 배열의 시작(start 주소)
//	printf("aa[1]의 값은 %d, 주소는 %d\n", aa[1], &aa[1]); // 그러므로 문자열을 입력받을 때는 & 사용하지 않는다!
//	printf("aa[2]의 값은 %d, 주소는 %d\n", aa[2], &aa[2]); // c에서는 문자열이란게 없어서 문자형 배열을 사용한다. 그래서 문자배열일때는 scanf일떄 &를 붙이지 않는다
//	printf("배열 aa의 값 %d\n", aa);
//
//	// sizeof(arr)/sizeof(int)
//
//	// &aa[0] == aa + 0(0칸)
//	// &aa[1] == aa + 1(1칸) 칸수 만큼 띄우는 것 int 형이면 4바이트
//	return 0;
//}

//
//#include<stdio.h>
//int main(void)
//{
//	int aa[3] = { 1,2,3 };
//
//	printf("&aa[0]의 값은 %d, aa + 0은 %d\n", &aa[0], aa+0); 
//	printf("&aa[1]의 값은 %d, aa + 0은 %d\n", &aa[1], aa + 1);
//	printf("&aa[2]의 값은 %d, aa + 0은 %d\n", &aa[2], aa + 2);
//
//	return 0;
//}

//
//#include<stdio.h>
//int main(void)
//{
//	char ch;
//	// (char*) (p); 인가? (char) (*p) 인가? -> 툴 마다 다름!
//	// char *p // char* p // char * p 툴에 따라 다른데 비쥬얼 스튜디오는 char* p 인 거 같다. 
//
//
//	char* p;
//	ch = 'A';
//	p = &ch;
//	
//
//	printf("ch가 가지고 있는 값 ch : %c \n", ch);
//	printf("ch의 주소(address) 값 &ch : %d \n",&ch);
//	printf("p가 가지고 있는 값 p : %d \n", p);
//	printf("p가 가리키고 있는 실제 값 p : %c \n", *p);
//	
//	return 0;
//}
