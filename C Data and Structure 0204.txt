포인터 스택은 다음과 같은 형태로 이루어진다.

	pop / push / peek
	
	top bottom


1. 노드의 구조
    typedef struct LinkedStackNodeType {
	int data;
	struct LinkedStackNode* pLink;
    }LinkedStackNode;



2. 스택의 구조
    typedef struct LinkedStackType {
	int currentCount; // 현재 노드의 개수
	LinkedStackNode * pTop; // 탑 노드의 포인터 
    } LinkedStack;

stack : LIFO <====> queue : FIFO

queue
데이터를 넣는 것 : 인큐
데이터를 꺼내는 것 : 디큐
큐에서의 bottom은 front
큐에서의 top은 rear


front : 첫 번째 요소
rear : 마지막 요소를 식별하기 위한 변수 -> 리어는 마지막 요소의 다음 인덱스를 값으로 잡는다. 
이유 : 인큐할때 큐에서는 미리 인큐할 위치를 지정해서 리어로 잡는다
* 프론트 및 리어는 논리적으로 데이터의 순서를 의미한다.

큐는 디큐를 하면 디큐 한 자리가 빠지고 뒤에 있는 노드들이 이동해서 앞 칸으로 이동한다(가장 먼저 들어간 데이터가 삭제 되고 데이터들이 한칸 씩 땡겨진다.)
ㄴ 이러면 데이터들이 한칸 씩 땡겨질 때에 복잡한 상황이 발생.
이걸 보완해서 ring buffer가 나오게 됨

큐 구조체가 가지는 멤버 변수는 크게 5가지를 가질 수 있다.
1. 큐 최대 개수
2. 프런트
3. 리어
4. 자료 저장을 위한 배열
5. 현재의 노드 개수

typedef struct {
	int max;   // 최대 용량을 저장하는 변수
	int num;  // 큐에 쌓여있는 데이터 수
	int front;  // 
	int rear;   //
	int *que;  // 데이터를 저장히기 위한 큐
}IntQueue;


트리(Tree) : 데이터 사이의 계층 관계를 나타내는 자료 구조이다.
(족보, 부모, 형제, 자식 등등)을 나타낼 수 있다.

트리에는 크게 2가지의 개념 : 1. 노드 2. 가지

루트 : 트리 구조에서 가장 윗 부분의 위치하는 노드
        (루트노드는 한 개만 존재)
리프(leaf) : 가장 아래에 위치한 노드(트리 구조에서 마지막 노드)
   (끝 노드, 바깥노드 라고도 한다)
안쪽 노드 : 루트 노드 및 리프 노드를 제외한 노드들
형제 노드 : 같은 부모에서 파생된 노드
레벨 : 루트 노드로부터 떨어져 있는지를 알아보는 레벨(0(루트 노드)부터 시작 노드가 늘어날 때마다 0->1->2 식으로 증가)
차수 : 노드가 가지고 있는 자식의 수(모든 노드의 자식 수가 2개 이하인 경우 특별히 이진트리 라고 부른다)
널 트리 : 가지가 없는 트리